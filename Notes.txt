https://github.com/avamsykiran/Java8_Mar24Mar30_09001130.git

Java
-----------------------------------------------------------

    History & Evolution

            GPL - Genernal Purpose Programing language
            High level, partially and strictly object oriented 

            Evolution
                1.0,1.1,1.2,1.3...................1.11

                java2 , java 4, java 5 ......java 8 .....java 11

            Distributables

                JRE Java Rutime Environment   
                    JVM  Java Virtual Machine           
                
                JDK Java Development Kit

                None of the above are platform independent.

                Prog.java ---javac---> Prog.class (IBC) 

                Intermediate Byte Code is paltformn independent.

            Edition

                Java SE     Standard Edition    (Core Java)
                                    Buildin standalone or network based
                                    console applications,
                                    GUI applcations

                Java EE     Enterprise Edition
                                    Building Entripirse level (Distributed) applciation.
                
                Java ME     Micro Edition
                                    Embede system development.(microcontroller programing)

    Characteristics

        1. High Level
        2. Partially and Strictly Object oriented
        3. Strongly Typed
        4. Case Sensitive.
        5. Syntax is inspired from C and C++, ; statement termination, {} for code blocks

    Featurea

        1. Simple
        2. Robust
        3. Distributed
        4. Secure
        5. Self Docuemnted
        6. Multi Threaded
        7. Platform independent
        8. Archetecture Neutral

    Tokens  smallest indivbisable unit of source code.
        
        Identifiers
                    is a name of a resource (variable/object/method/class..etc)


                    variable and method name must follow camel case
                            starts in lower case and continues 
                            in lower case but has initital capitals
                            from the second segment of the name.

                            length
                            roomLength
                            roomLengthInMeter

                            display()
                            displayData()
                    
                    Naems of user defiend data types (Classes / interfaces/enums/annnotations)
                            follow initial capitals all through

                        Week
                        Month
                        Employee
                        ArrayIndexOutOfBoundsException

                    Names of cosntants must be all capitals, and use _ to
                    seperate the segments

                            PI
                            MIN_VALUE
                            MAX_VALUE

        Keywords

                    is a reserved word.
                    all keywords are lower in case.
                    52 kws

        Operators

                    Binary  
                        Arithmetic  +   -   *   /   %
                        Assignment  =   -=  +=  *=  /=  %=
                        Relational  ==  <   >   <=  >=  !=
                        Logical     &&  ||  !
                        
                    Unary
                                    -
                                    --
                                    ++

                    Ternary         ?:

                    Misllenous
                                    .
                                    ;
                                    ()
                                    {}
                                    []
                                    <>
                                    ->
                                    ::
                                    new
                                    instanceof

        Comments
                    //end of line Comments
                    /* block Comments */

        Literals    any hard coded value into the source code.

                    class App01{
                        public static void main(String args[]){
                            final double PI = 3.14;
                            int r = 23;
                            double c = 2*PI*r;
                        }
                    }
                                    line1   line2               line3          line4  
                    Identifiers     App01   main,args           PI                 r
                    Keywords        class   public,static,void  final,double    int
                    Operators       {       [,],{               =
                    Comments                                    
                    Literals                                    3.14            23



                    Integer Literals
                            Decimal Numeric System
                                    int x = 45;
                                    int y = 78_865; 
                            Hexadecimal Numeric System
                                    int a = 0x1A;
                                    int b = 0xFF;
                            Octal Numeric System
                                    int l = 012;
                                    int m = 077;

                    Floating Literals
                            Decimal Numeric System
                                double d = 56.67;
                                float f = 3.14f;

                    Stirng Literals         ""
                    Character Literals      ''
                    Boolean Literals        true,false
                    Void Literals           null


        Java Data Types

            Primitive

                    int
                    short
                    long
                    Byte
                    double
                    float
                    char
                    boolean
                    void

            Reference/User Defined 

                    Class
                    Enum
                    Interface
                    Annotation

        Control Structure

            Branching/Decision Making Control Structure
                    Simple if
                    if .. else
                    if ladder
                    nested if
                    switch          int,char,strings and enums

            Iterating Control Structure/Loops

                    for
                    while
                    do..while
                    enhanced for/for each

            Unconditional Control Structure

                    break;
                    continue;
                    return;

    Object Oriented Programming
    ----------------------------------------

            Class and Object
                    1. Each object is a reference.
                    2. Constructor
                    3. this
                    4. Field    -   Class Variable (Static fields), Instance Variable
                    5. Method   -   Class Method (Static method), Instance Methods
                    6. static 

            Encapsulation
                    Access Specifier / Modifer
                        Public
                        Private
                        Protected
                        Default
                    
                    using setters and getters.

            Polymorphisim
                        Overloading
                        Overriding

            Inheretence
                       extends
                       only one super class
                       java.lang.Object is the implicit super class for all java classes.
                       no multiple ineheretence for classes.
                        super keywrd
            Abstraction
                        abstract method
                        abstract class
                        interface
                                        implements

                                        one interfce can extended by another interface
                                        any number of interfaces can be implemented by a class

    =========================================================================================

    interface
                public abstract methods,
                public static final fields,
                public default method - that can have implementation
                public static method
                
    java.lang               implicitly available packege.
        Object
                        implicit super class for all java classes.
                        clone();
                        boolean equals(Object);
                        int hashcode();
                        String toString();

        System
                        InputStream in,PrintStream err,PrintStream out

                        void exit(int);
                        void gc();

        Math            sin,cos,log,sqrt,cbrt,exp,pow..............

        String          immutable - they can not be changed/modified.
        StringBuffer
        StringBuilder
        
        Exceptions
        ------------------------------------------------

                        abnormality in the execution of our app.

                        Throwable
                            |
                        ---------------------
                        |                   |
                        Error               Exception   
                                            |   ------ ExcepotionClasses are derived CHECKED
                                            |
                                            RuntimeException
                                                ------ ExcepotionClasses are derived UNCHECKED

                    
                    Compiler will not force the handling of UNCHECKED Exceptions.
                                becoz, UNCHECKED exception are NOT SUPPOSED TO BE HANDLED
                                BUT ARE SUPPOSED TO BE AVOIDED.

                    ArrayIndexOutOfBoundsException
                            public int increment(int n){
                               return arr[n]++;
                            }

                            public int increment(int n){
                                int result = 0;
                                if(n>=0 && n<arr.length)
                                    result = arr[n]++;
                                return result;
                            }

                    NullPointerException
                            public void inflate(Book book){
                                if(book!=null)
                                    book.setPrice(book.getPrice()*2);
                            }
                    
                    Compiler will force the handling of CHECKED Exceptions

                        IOException
                        SQLException
                        FileNotFoundException

                    try{
                        code that may throw an exception
                    }catch(ExceptionType1 e){
                        error handlign code
                    }catch(ExceptionType2 e){
                        error handlign code
                    }catch(ExceptionType3 e){
                        error handlign code
                    }finally {
                        code that has to execute 
                        irrespective of an exception bneing thrown or not
                    }

                    //multi catch block
                    try{
                        code that may throw an exception
                    }catch(ExceptionType1 | ExceptionType2 | ExceptionType3 e){
                        error handling code
                    }finally {
                        code that has to execute 
                        irrespective of an exception bneing thrown or not
                    }

                    //try-with-resources


                    Connection con = null;

                    try{
                        con = DirverManger.getConnection(...);
                        ...

                    }catch(SQLException exp){
                        ...........
                    }finally{
                        try{
                         if(con!=null)
                          con.clsoe();
                        }catch(SQLException exp){

                        }
                    }                    

                    try(Connection con =DirverManger.getConnection(...);){
                        ...
                    }catch(SQLException exp){
                        ...........
                    }


                    throw           used to raise userdefiend exceptions.
                    throws          uwsed to transfer an exception 
                                    from the method to its caller.

        java.time
    
            handle data and time operations.

            LocalDate
            LocalTime
            LocalDateTime
                            Class Methods
                            .now()
                            .of(int,int,int,int,int)
                            Instance Methods
                            .getHour() ...etc for each fields
                            .toString()
                            .format(DateTimeFormatter)
                            .parse(String); //ISO yyyy-MM-ddThh:mm:ss
                            .parse(String,DateTimeFormatter)
                            .before(....)
                            .after(....)

            ZonalDate
            ZonalTime
            ZonalDateTime
                            Class Methods
                            .now(ZoneId)

            DateTimeFormatter.ofPattern("");
                            yy,yyyy             year
                            M,MM,MMM,MMMM       month
                            d,dd                day
                            h,hh,H,HH           hour
                            m,mm                minute
                            s,ss                second
                            a                   AM/PM

            Duration
            Period
                            .between(start,end);

    Threads
                        Runnable
                            |       public void run()
                        Thread
                                    Thread()
                                    Thread(String name)
                                    Thread(Runnable)
                                    Thread(Runnable,String)

                                    start();
                                    getName()
                                    setName(String)
                                    getPriority();
                                    setPriority(int); 1 to 10, default is 5.

                                    currentThread(); //static
                                    sleep(long); //static

                        Thread Life Cycle
                                Iniation
                                Queued/Ready
                                Running/Execution
                                Paused
                                Terminated
   

                                | new Thread() 
                                Iniation
                                |
                                |start()
                                |
                                Queued/Ready ---CPU and other res's are available -- Running
                                    | wakes up / notify()                                |
                                Paused <---- sleep()/wait()<-----------------------------|
                                                                        (job is compelet)|
                                                                                        |
                         class Job {                                                       Terminated
                            public void doSomething(Object object) {
                                ................
                                synchronized (object){
                                    ...
                                }
                                .............
                            }

                            public synchronized void doSomethingElse(){
                                ..........
                            }

                            public synchronized static void staticMethod(){

                            }// Job.class
                         }

    IO Streams
                    stream is a flow of 'data'

            BinaryStreams (data can written or read as 'bytes')

                                java.io.OutputStream
                    Program -----------> File
                            -----------> Console
                            -----------> Another Program on the network ..

                                java.io.InputStream
                    Program <----------- File
                            <----------- KB/Mouse
                            <----------- another Prog on network
            
            TextStreams (data can written or read as character/strings)

                               java.io.Writer       java.io.OutputStream
                    Program ----Text---->    bytes  -----------> File
                            ----Text---->    bytes  -----------> Console
                            ----Text---->    bytes  -----------> Another Program on the network ..

                             java.io.Reader    java.io.InputStream
                    Program <-Text------ bytes <----------- File
                            <-Text------ bytes <----------- KB/Mouse
                            <-Text------ bytes <----------- another Prog on network

                    java.io.InputStream
                                FileInputStream
                                ObjectInputStream   //deserialization
                    
                    java.io.OutputStream
                                FileOutputStream
                                ObjkectOutputStream //serialization
                                PrintStream

                    java.io.Reader
                                InputStreamReader
                                BufferedReader
                                FileReader

                    java.io.Writer
                                FileWriter
                    
                    File
                    IOException
                    FileNotFoundException
                    

    Generics and Coillections

            Generics are also ADT, Abstract Data Type.......

                swap two variables:
                    t = a;
                    a = b;
                    b = t;

        Collections
        --------------java approach to datastructures------------------------------------

            java.util

                    DECLARATIONS (interfaces)

                            Collection   (group of eles)    Map (group of key,value pairs)
                                |                           |
                            ---------                       SortedMap
                            |       |
                            Set     List
                            |
                            SortedSet

                    IMPLEMENTATIONS

                        Set implementations
                                - No duplicates
                                - Dont have the concept of index
                                - Dont support random access
                                - One single Null is allowed

                            HashSet             the order of retrive is uncerten
                            LinkedHashSet       the order of retrive is entry order
                            TreeSet             the order of retrival is sorted order 
                                                    primitive elements or string - ascending order
                                                    other types, Comparable/Comparator will dictact.

                                    java.lang.Comparable
                                            default comparision
                                            implemented by the class 
                                            whose object are beign comapred.

                                    java.util.Comparator
                                            external comparision 

                     List implementations
                                - Allowed duplicates
                                - have the concept of index
                                - support random access
                                - Nulls are allowed
                            
                            ArrayList       internally an array
                            Vector          internally an array, and thread safe.
                            LinkedList      internally a double linked list

                    ALGORITHMS

                            Iterator
                            ListIterator
                            Collections
                            Arrays
                            Comparator

    Functional Interfaces

            is an interface that has one and only one abstract method.

            @FunctionalInterface
            interface ISummer{
                public abstract double sum(int a,int b);                
            }
            
            @FunctionalInterface
            interface IGreet{
                public abstract String greet(String userName);
            }
    
    Lambda Expressions 

            (argsList) -> returnValueExpression;
            (argsList) -> { function body.... };

            ISummer summerObj = (x,y) -> x+y;
            Sysout.out.println(summerObj.sum(10,20));
    
            IGreet helloGreeter = (unm) -> "Hello "+ unm;
            System.out.println(helloGreeter.greet("Vamsy")); //Hello Vamsy

            IGreet tiemBasedGreeter = (unm) -> {
                int h = LocalDate.now().getHour();
                String greeting = "";
                if(h>=4 && h<=12) greeting = "Good Morning ";
                else if(h>=12 && h<=14) greeting = "Good Noon ";
                else greeting = "Good Evening ";
                return greeting + unm;
            };
            System.out.println(tiemBasedGreeter.greet("Vamsy")); //Hello Vamsy

    Functional Interfces Categories

            Suppliers
                            @FunctionalInterface
                            interface StringSupplier{
                                public abstract String get();
                            }

                            StringSupplier orgTitle = () -> "CTS";

            Consumers            
                            @FunctionalInterface
                            interface StringConsumer{
                                public abstract void use(String str);
                            }

                            StringConsumer display = (s) -> {System.out.println(s);};
                     
            Predicates      those FunctionalInterface that always return boolean

            Functional      thois FunctionalInterface that accept args and return a value.

    java.util.function
    
    Strems API
    

